security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        api:
            pattern: ^/api/
            stateless: true
            provider: app_user_provider
            jwt: ~
       
        main:
            lazy: true
            provider: app_user_provider
            json_login: 
                check_path: /authentication_token
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            logout:
                path: /logout
                invalidate_session: false
            # form_login:
            #     login_path: login
            #     check_path: login

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/profile, roles: ROLE_USER }
        - { path: ^/api/users, roles: ROLE_USER }
        - { path: ^/api/search, roles: IS_AUTHENTICATED_ANONYMOUSLY }

        - { path: ^/api/professions, roles: PUBLIC_ACCESS }
        - { path: ^/api/materials, roles: PUBLIC_ACCESS }
        - { path: ^/api/create/user, roles: PUBLIC_ACCESS }
        - { path: ^/authentication_token, roles: PUBLIC_ACCESS }
        - { path: ^/api, roles: PUBLIC_ACCESS }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }
        # - { path: ^/api/users, roles: ROLE_USER }
        # - { path: ^/authentication_token, roles: PUBLIC_ACCESS }
        # - { path: ^/api, roles: IS_AUTHENTICATED_ANONYMOUSLY }
        # - { path: ^/authentication_token, roles: PUBLIC_ACCESS }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
